##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.3.0] date: [Wed Sep 04 23:31:55 BST 2019]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET =console-nucleo

FEATURE_TFT_DISPLAY :=yes

#######################################
# paths
#######################################
# Build path
BUILD_DIR :=build
TARGET_PATH =$(CURDIR)

LIB_PATH =$(LIBEMB_PATH)
DRIVERS_PATH =$(LIB_PATH)/drv
CMSIS_PATH 	=$(DRIVERS_PATH)/CMSIS

ifeq ($(shell uname -s), Linux)
REPOSITORY :=$(HOME)/STM32Cube/Repository/STM32Cube_FW_L4_V1.15.1
else
REPOSITORY :=C:/Users/hmr/STM32Cube/Repository/STM32Cube_FW_L4_V1.15.1
endif

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
$(TARGET_PATH)/Core/Inc \
$(CMSIS_PATH)/Core/Include \
$(CMSIS_PATH)/Device/ST/STM32L4xx/Include \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Inc \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Inc/Legacy \
$(LIB_PATH)/inc \
$(LIBEMB_PATH)/drv/inc \
$(APP_DIR)/inc \
$(APP_DIR)/libs/agif \
$(APP_DIR)/libs/dhrystone \
$(APP_DIR)/libs/si5351 \
######################################
# source
######################################
# C sources
C_SOURCES =  \
$(TARGET_PATH)/Core/Src/main.c \
$(TARGET_PATH)/Core/Src/stm32l4xx_it.c \
$(TARGET_PATH)/Core/Src/stm32l4xx_hal_msp.c \
$(TARGET_PATH)/Core/Src/system_stm32l4xx.c \
$(TARGET_PATH)/Core/Src/syscalls.c \
$(TARGET_PATH)/Core/Src/sysmem.c \
$(TARGET_PATH)/Core/Src/nc_serial.c \
$(TARGET_PATH)/Core/Src/dscr.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_tim.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_tim_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_uart.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_uart_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_i2c.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_i2c_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_rcc_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_flash.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_flash_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_flash_ramfunc.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_gpio.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_dma.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_dma_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr_ex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_cortex.c \
$(REPOSITORY)/Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_exti.c \
$(LIB_PATH)/src/strfunc.c \
$(LIB_PATH)/src/fifo.c \
$(LIB_PATH)/src/stm32_buzzer.c \
$(DRIVERS_PATH)/pwm/pwm_stm32l4xx.c \
$(DRIVERS_PATH)/tft/st7735.c \
$(DRIVERS_PATH)/rng/rng_software.c \
$(DRIVERS_PATH)/spi/spi_stm32l4xx.c \
$(DRIVERS_PATH)/i2c/i2c_stm32l4xx.c \
$(DRIVERS_PATH)/uart/uart_stm32l4xx.c \
$(DRIVERS_PATH)/dma/dma_stm32l4xx.c \
$(LIB_PATH)/src/liblcd.c \
$(LIB_PATH)/src/lib2d.c \
$(LIB_PATH)/src/font.c \
$(APP_DIR)/libs/dhrystone/dhry_1.c \
$(APP_DIR)/libs/dhrystone/dhry_2.c \
#$(APP_DIR)/agif/agif.c \

CPP_SOURCES = \
$(LIB_PATH)/src/console.cpp \
$(APP_DIR)/src/app.cpp \
$(APP_DIR)/src/cmdmem.cpp \
$(APP_DIR)/src/cmdrfinder.cpp \
$(APP_DIR)/src/cmdbuz.cpp \
$(APP_DIR)/src/cmdkeyfob.cpp \
$(APP_DIR)/src/cmdpwm.cpp \
$(APP_DIR)/src/cmdtft.cpp \
$(APP_DIR)/src/cmdlmcshd.cpp \
$(APP_DIR)/src/cmdbenchmark.cpp \
$(APP_DIR)/src/cmdi2c.cpp \
$(APP_DIR)/src/cmdsi5351.cpp \
$(APP_DIR)/libs/si5351/si5351.cpp \
#$(APP_DIR)/agif/AnimatedGIF.cpp \

# ASM sources
ASM_SOURCES =  \
$(TARGET_PATH)/Core/Startup/startup_stm32l412kbux.s

# link script
LDSCRIPT =$(TARGET_PATH)/STM32L412KBUx_FLASH.ld

######################################
# building variables
######################################
ifeq ($(RELEASE), 1)
OPT =-Os
else
OPT =-Og -g -gdwarf-2
endif


# macros for gcc
COMMON_DEFS = \
__NUCLEO_L412KB__\
BOARD_NUCLEO_L412KB \
STM32L412xx \
USE_HAL_DRIVER \
'VERSION_STRING="$(VERSION)"' \
_FEATURE_GIF \
MSC_CLOCK \
FIFO_INTERRUPT_SAFE=1 \
FIFO_SIZE=128

#######################################
# binaries
#######################################
PREFIX =arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef _GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
CPP = $(GCC_PATH)/$(PREFIX)g++
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
CPP = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
LD = $(PREFIX)gcc
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

TAG_COMMIT := $(shell git rev-list --abbrev-commit --tags --max-count=1)
COMMIT := $(shell git rev-parse --short HEAD)
TAG := $(shell git describe --abbrev=0 --tags ${TAG_COMMIT} 2>/dev/null || true)
DATE := $(shell git log -1 --format=%cd --date=format:"%Y%m%d")
#VERSION := $(TAG:v%=%)

#ifneq ($(COMMIT), $(TAG_COMMIT))
#    VERSION := $(VERSION)-next-$(COMMIT)-$(DATE)
#endif

ifeq ($(TAG),)
    VERSION :=$(COMMIT)-$(DATE)
else
    VERSION :=$(TAG)-$(COMMIT)-$(DATE)
endif

ifneq ($(shell git status --porcelain | grep -v '^??'),)
    VERSION := $(VERSION)-dirty
endif

#######################################
# CFLAGS
#######################################
# cpu
CPU =-mcpu=cortex-m4 -mthumb

# fpu
FPU =-mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI =-mfloat-abi=hard

# mcu
MCU = $(CPU) $(FPU) $(FLOAT-ABI)

# AS defines
AS_DEFS = 

ifeq ($(FEATURE_TFT_DISPLAY),yes)
COMMON_DEFS +=ENABLE_TFT_DISPLAY
endif

# C defines
C_DEFS =  \
$(COMMON_DEFS) \

# CPP defines
CPP_DEFS = \
$(COMMON_DEFS) \
'__weak=__attribute__((weak))' \
'__packed=__attribute__((__packed__))' \

COMMON_FLAGS =$(MCU) $(OPT) -Wall -fdata-sections -ffunction-sections -u _printf_float

# compile gcc flags
ASFLAGS =$(AS_DEFS) $(AS_INCLUDES) $(COMMON_FLAGS)

CFLAGS =$(addprefix -D, $(C_DEFS)) $(addprefix -I, $(C_INCLUDES)) $(COMMON_FLAGS)

CPPFLAGS =$(addprefix -D, $(CPP_DEFS)) $(addprefix -I, $(C_INCLUDES)) $(COMMON_FLAGS) -fno-exceptions -fno-rtti

# Generate dependency information
#CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
# Assembly options
#CFLAGS += -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst))


#######################################
# LDFLAGS
#######################################

# libraries
SPECS =--specs=nosys.specs --specs=nano.specs 
LIBS =-lm -lstdc++
LIBDIR =
LDFLAGS = $(MCU) $(SPECS) -u _printf_float -T$(LDSCRIPT) $(LIBDIR) -Wl,--gc-sections,-Map=$(BUILD_DIR)/$(TARGET).map,--cref

#######################################
# Rules
#######################################
# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin
	@echo
ifeq ($(DEBUG), 1)
	@$(SZ) -A -x $(BUILD_DIR)/$(TARGET).elf
else
	@$(SZ) -B -x $(BUILD_DIR)/$(TARGET).elf
endif

$(TARGET).cfg:
	@echo "Creating opencod configuration file for st-link"
	@echo "source [find interface/stlink.cfg]" >> $@
	@echo "transport select "hla_swd"" >> $@
	@echo "source [find target/stm32l4x.cfg]" >> $@
	@echo "adapter speed 4000" >> $@
	

program: $(BUILD_DIR)/$(TARGET).elf $(TARGET).cfg
	openocd -f $(TARGET).cfg -c "program $(BUILD_DIR)/$(TARGET).elf verify reset exit"

test:
#@echo $(VERSION)
#@echo ""; $(foreach d, $(OBJECTS), echo $(d);)
	@echo $(sort $(C_INCLUDES))
#@echo $(C_SOURCES)

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	@echo "[CC]  " $<
	@$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	@echo "[AS]  " $<
	@$(AS) -c $(ASFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	@echo "[CC]  " $<
	@$(CPP) -c $(CPPFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	@echo "[LD]  " $@
	@$(LD) $(OBJECTS) $(LDFLAGS) -o $@ $(LIBS)

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "Building hex file:" $@
	@$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	@echo "Building bin file:" $@
	@$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir -p $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
#-include $(wildcard $(BUILD_DIR)/*.d)

ifeq ($(GCC_COLORS),)
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:locus=01:quote=01'
unexport GCC_COLORS
endif

# *** EOF ***
