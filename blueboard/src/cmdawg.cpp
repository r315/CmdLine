
#include "board.h"
#include "cmdawg.h"

#define AWG_ENABLE      (1 << 0)
#define AWG_DAC_ON      (1 << 1)

const uint16_t sine160[160] = {
0xFFFF,0x8602,0x0205,0x8907,0x000A,0x7E0C,0xF10E,0x5F11,
0xC613,0x2816,0x7D18,0xCB1A,0x101D,0x431F,0x7321,0x8D23,
0x9E25,0xA027,0x9129,0x712B,0x412D,0xFF2E,0xAB30,0x4232,
0xC833,0x3535,0x9436,0xD537,0x0739,0x1F3A,0x213B,0x0B3C,
0xDE3C,0x993D,0x3C3E,0xC53E,0x363F,0x8D3F,0xD03F,0xF13F,
0x0340,0xF03F,0xD03F,0x8C3F,0x393F,0xC43E,0x3A3E,0x9C3D,
0xDA3C,0x103C,0x1C3B,0x243A,0x0239,0xDB37,0x8D36,0x3B35,
0xC433,0x4532,0xA930,0xFF2E,0x422D,0x712B,0x9129,0x9E27,
0xA025,0x8D23,0x7221,0x441F,0x101D,0xC91A,0x8018,0x2716,
0xC513,0x6211,0xEE0E,0x7E0C,0x030A,0x8507,0x0605,0x8302,
0x0000,0x7DFD,0xFAFA,0x7AF8,0xFEF5,0x82F3,0x12F1,0x9EEE,
0x3BEC,0xD8E9,0x83E7,0x33E5,0xF5E2,0xB6E0,0x95DE,0x6CDC,
0x65DA,0x60D8,0x6FD6,0x8FD4,0xBED2,0x02D1,0x54CF,0xC0CD,
0x35CC,0xCDCA,0x6CC9,0x2AC8,0xFAC6,0xE0C5,0xE0C4,0xF4C3,
0x22C3,0x68C2,0xC4C1,0x3BC1,0xC9C0,0x73C0,0x31C0,0x0EC0,
0xFFBF,0x0DC0,0x32C0,0x74C0,0xC6C0,0x3EC1,0xC2C1,0x69C2,
0x21C3,0xF6C3,0xDDC4,0xE2C5,0xFAC6,0x29C8,0x6EC9,0xCACA,
0x37CC,0xBFCD,0x56CF,0xFFD0,0xC1D2,0x8CD4,0x71D6,0x60D8,
0x62DA,0x72DC,0x8EDE,0xBCE0,0xF0E2,0x37E5,0x80E7,0xDAE9,
0x39EC,0xA0EE,0x12F1,0x80F3,0x00F6,0x78F8,0xFBFA
};

const uint16_t square [] = {
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
    0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF, 0x8000, 0x7FFF,
};

int16_t samples[256];

#define TEST_SIGNAL square


void CmdAwg::help(void){
 	//vcom->printf("Usage: awg [option] \n\n");    
     console->print("to be implemented");    
}

char CmdAwg::execute(void *ptr){
    char *argv[4] = {0};
    int argc;

    if(!(flags & AWG_DAC_ON)){
        dacEnable(true);

        dac.buf = samples;
        dac.len = sizeof(TEST_SIGNAL)/sizeof(uint16_t);
        dac.rate = 0xFFFF;

        /** Convert to unsigned, and clear bit 0
         * Setting bit 0 has the same effect as
         * setting BIAS bit 
         * */
        for (uint32_t i = 0; i < dac.len; i++){
            samples[i] = (0x8000 + (int16_t)TEST_SIGNAL[i]) & 0xFFC0; // clear lower 6 bits
        }        
    }    

    argc = strToArray((char*)ptr, argv);

    if(xstrcmp("single", (const char*)argv[0]) == 0){
        dac.loop = 0;
        DAC_Config(&dac);
        DAC_Start(&dac);
    }

    if(xstrcmp("start", (const char*)argv[0]) == 0){
        dac.loop = 1;
        DAC_Config(&dac);
        DAC_Start(&dac);
    }

    if(xstrcmp("stop", (const char*)argv[0]) == 0){
        DAC_Stop(&dac);
    }

    if(xstrcmp("write", (const char*)argv[0]) == 0){
        if(hatoi(argv[1], (uint32_t*)&argc)){ 
            DAC_Write(&dac, argc);
        }
    }

    return CMD_OK;
}

void CmdAwg::dacEnable(uint8_t en){
    if(en){
        DAC_Init(&dac);
        flags |= AWG_DAC_ON;
    }else{
        DAC_DeInit(&dac);
        flags &= ~AWG_DAC_ON;
    }
}
